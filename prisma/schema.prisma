generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book_copy {
  copy_id          String             @id @db.Char(10)
  book_id          String             @db.Char(6)
  status           String             @db.VarChar(10)
  book_title       book_title         @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction)
  borrowing_detail borrowing_detail[]
}

model book_genre {
  book_id    String     @db.Char(6)
  genre_id   String     @db.Char(3)
  book_title book_title @relation(fields: [book_id], references: [book_id], onDelete: Cascade)
  genre      genre      @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade)

  @@id([book_id, genre_id])
}

model book_title {
  book_id    String       @id @db.Char(6)
  title      String       @db.VarChar(100)
  author     String       @db.VarChar(100)
  publisher  String       @db.VarChar(100)
  year       Int
  language   String       @db.VarChar(20)
  page       Int
  image_path String?
  book_copy  book_copy[]
  book_genre book_genre[]
}

model booking_detail {
  booking_id    String        @id @db.Char(10)
  member_id     String        @db.Char(10)
  space_id      String        @db.Char(4)
  start_time    DateTime      @db.Timestamp(6)
  end_time      DateTime      @db.Timestamp(6)
  pay_id        String        @db.Char(10)
  user          user          @relation(fields: [member_id], references: [user_id], onDelete: NoAction)
  payment       payment       @relation(fields: [pay_id], references: [pay_id], onDelete: NoAction)
  working_space working_space @relation(fields: [space_id], references: [space_id], onDelete: NoAction)
}

model borrowing_detail {
  borrow_id                               String    @id @db.Char(10)
  member_id                               String    @db.Char(10)
  book_copy_id                            String    @db.Char(10)
  approved_by                             String    @db.Char(10)
  borrow_date                             DateTime  @db.Date
  due_date                                DateTime  @db.Date
  return_date                             DateTime? @db.Date
  status                                  String    @db.VarChar(10)
  pay_id                                  String?   @db.Char(10)
  user_borrowing_detail_approved_byTouser user      @relation("borrowing_detail_approved_byTouser", fields: [approved_by], references: [user_id], onDelete: NoAction)
  book_copy                               book_copy @relation(fields: [book_copy_id], references: [copy_id], onDelete: NoAction)
  user_borrowing_detail_member_idTouser   user      @relation("borrowing_detail_member_idTouser", fields: [member_id], references: [user_id], onDelete: NoAction)
  payment                                 payment?  @relation(fields: [pay_id], references: [pay_id], onDelete: NoAction)
}

model genre {
  genre_id    String       @id @db.Char(3)
  genre_name  String       @db.VarChar(20)
  description String
  book_genre  book_genre[]
}

model membership_tier {
  tier                String         @id @db.VarChar(10)
  benefits            String
  discount_percentage Int
  monthly_fee         Float
  subscription        subscription[]
}

model payment {
  pay_id                       String             @id @db.Char(10)
  member_id                    String             @db.Char(10)
  staff_id                     String?            @db.Char(10)
  create_at                    DateTime           @default(now()) @db.Timestamp(6)
  amount                       Float              @db.Real
  method                       String             @db.VarChar(20)
  status                       String             @db.VarChar(10)
  booking_detail               booking_detail[]
  borrowing_detail             borrowing_detail[]
  user_payment_member_idTouser user               @relation("payment_member_idTouser", fields: [member_id], references: [user_id], onDelete: NoAction)
  user_payment_staff_idTouser  user?              @relation("payment_staff_idTouser", fields: [staff_id], references: [user_id], onDelete: NoAction)
  subscription                 subscription[]
}

model space_type {
  space_name    String          @id @db.VarChar(50)
  area          Int
  facilities    String
  capacity      Int
  price         Float           @db.Real
  image_path    String?
  working_space working_space[]
}

model subscription {
  member_id       String          @db.Char(10)
  start_date      DateTime        @db.Date
  end_date        DateTime        @db.Date
  tier            String          @db.VarChar(10)
  pay_id          String?         @db.VarChar(10)
  user            user            @relation(fields: [member_id], references: [user_id], onDelete: NoAction)
  payment         payment?        @relation(fields: [pay_id], references: [pay_id], onDelete: NoAction)
  membership_tier membership_tier @relation(fields: [tier], references: [tier], onDelete: NoAction)

  @@id([member_id, start_date])
}

model user {
  user_id                                             String             @id @db.Char(10)
  f_name                                              String             @db.VarChar(50)
  l_name                                              String             @db.VarChar(50)
  email                                               String             @db.VarChar(100)
  password                                            String             @db.VarChar(100)
  role                                                String             @db.VarChar(10)
  phone                                               String?            @db.Char(10)
  address                                             String?
  image_path                                          String?
  booking_detail                                      booking_detail[]
  borrowing_detail_borrowing_detail_approved_byTouser borrowing_detail[] @relation("borrowing_detail_approved_byTouser")
  borrowing_detail_borrowing_detail_member_idTouser   borrowing_detail[] @relation("borrowing_detail_member_idTouser")
  payment_payment_member_idTouser                     payment[]          @relation("payment_member_idTouser")
  payment_payment_staff_idTouser                      payment[]          @relation("payment_staff_idTouser")
  subscription                                        subscription[]
}

model working_space {
  space_id       String           @id @db.Char(4)
  space_name     String           @db.VarChar(50)
  status         String           @db.VarChar(20)
  booking_detail booking_detail[]
  space_type     space_type       @relation(fields: [space_name], references: [space_name], onDelete: Cascade)
}
